#include <bits/stdc++.h>
using namespace std;

int n, m;
int *parent;
//int *rank;
unordered_map<int, int> ranks;

struct Edge {
	int vertex1;
	int vertex2;
	int weight;
	
	Edge(int vertex1, int vertex2, int weight) {
		this->vertex1 = vertex1;
		this->vertex2 = vertex2;
		this->weight = weight;
	}
};

struct Graph {
	int vertices;
	vector<Edge> edges;
};

Graph g;

int find(int i) {
	if (i == parent[i])
		return i;
	return find(parent[i]);
}

void union2(int set1, int set2) {
	//int *rank = new int[n];
	if (ranks[set1] > ranks[set2]) {
		parent[set2] = set1; 
	}
	
	else if (ranks[set2] > ranks[set1]) {
		parent[set1] = set2;
	}
	
	else {
		parent[set1] = set2;
		ranks[set2]++;
	}
}

vector<Edge> result;

void kruskal() {
	parent = new int[n];
	//rank = new int[n];
	
	for (int i = 0; i < n; i++) {
		parent[i] = i;
		ranks[i] = 0;
	}
	sort(g.edges.begin(), g.edges.end(), [](Edge x, Edge y){
		return x.weight < y.weight;
	});
	
	for (Edge e : g.edges) {
		int root1 = find(e.vertex1);
		int root2 = find(e.vertex2);
		
		if (root1 != root2) {
			result.push_back(e);
			union2(root1, root2);
		}
	}
}



int main() {
	cout << "Enter the no. of vertices: ";
	cin >> n;
	
	g.vertices = n;
	
	cout << "Enter the no. fo edges: ";
	cin >> m;
	cout << "Enter the edges and their corresponding weight:" << endl;
	int x, y, w;
	for (int i = 1; i <= m; i++) {
		cin >> x >> y >> w;
		Edge e(x, y, w);
		g.edges.push_back(e);
	}
	
	kruskal();
	cout << "Minimum spanning tree: " << endl;
	for (int i = 0; i < result.size(); i++) {
		cout << result[i].vertex1 << " " << result[i].vertex2 << " " << result[i].weight << endl;
	}
}
