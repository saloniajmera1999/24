#include<bits/stdc++.h>
using namespace std;

class Edge 
{
    public:
        int source;
        int dest;
        int weight;
};

bool comp(Edge e1, Edge e2)
{
    return e1.weight < e2.weight;
}

int findParent(int v, int *parent)
{
    if (parent[v] == v)
        return v;
    return findParent(parent[v], parent);
}

void kruskal(Edge *arr, int n, int E)
{
    sort(arr, arr + E, comp);

    Edge *output = new Edge[n - 1];
    int *parent = new int[n];
    for (int i = 0; i < n; i++)
        parent[i] = i;
    int count = 0;
    int i = 0;
    while (count != n - 1)
    {
        Edge current = arr[i];
        int sourceP = findParent(current.source, parent);
        int destP = findParent(current.dest, parent);

        if (sourceP != destP)
        {
            output[count++] = current;
            parent[sourceP] = destP;
        }
        i++;
    }
    for (int i = 0; i < n - 1; i++)
    {
        if (output[i].source < output[i].dest)
            cout << output[i].source << " " << output[i].dest << " " << output[i].weight << endl;
        else 
            cout << output[i].dest << " " << output[i].source << " " << output[i].weight << endl;
    }
}

int main()
{
    int n, E;
    cout << "Enter no of vertices: ";
    cin >> n;
    cout << "Enter no of edges: ";
    cin >> E;
    Edge *arr = new Edge[E];
    for (int i = 0; i < E; i++)
    {
        int s, d, w;
        cout << "Enter source: ";
        cin >> s;
        cout << "Enter destination: ";
        cin >> d;
        cout << "Enter Edge weight:";
        cin >> w;
        arr[i].source = s;
        arr[i].dest = d;
        arr[i].weight = w;
    }
    kruskal(arr, n, E);
    return 0;
}
