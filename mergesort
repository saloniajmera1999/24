#include<bits/stdc++.h>
using namespace std;
long long int comparisons=0;

void Merge(int a[],int low,int high,int mid)
{
	int i,j,k,temp[high-low+1];
	i=low;
	k=0;
	j=mid+1;
	while(i<=mid && j<=high)
	{
        comparisons++;
		if (a[i]<a[j])
		{
			temp[k]=a[i];
			k++;
			i++;
		}
		else
		{
			temp[k]=a[j];
			k++;
			j++;
		}
	}
	while(i<=mid)
	{
		temp[k]=a[i];
		k++;
		i++;
	}
	while(j<=high)
	{
		temp[k]=a[j];
		k++;
		j++;
	}
	for(i=low;i<=high;i++)
	{
		a[i]=temp[i-low];
	}
}

void MergeSort(int a[],int low,int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		MergeSort(a,low,mid);
		MergeSort(a,mid+1,high);
		Merge(a, low,high,mid);
	}
}

int main()
{
	int size,n;
	cout<<"Enter size of data set:"<<endl;
	cin>>size;
	
	ofstream ofs("msort.txt");
	if(ofs.is_open())
	{
		for(int i=1;i<=size;i++)
		{
			n=rand() % size+1;
			ofs<<n<<endl;
		}
		ofs.close();
	}
	else
		cout<<"Unable to open file\n";
	
	ifstream ifs("msort.txt");
	//ifstream ifs("msortInc.txt");
	//ifstream ifs("msortDec.txt");
	int arr[size];
	int index=0;
	while(!ifs.eof() && index<size)
	{
		ifs>>arr[index++];
	}

	auto start=std::chrono::system_clock::now();
	MergeSort(arr,0,size-1);
	auto end=std::chrono::system_clock::now();
	chrono::duration<double>diff=end-start;
	
	cout<<"Time: "<<diff.count()<<'\n';
	cout<<"\nNumber of comparisons: "<<comparisons;
	
	ofstream myfile("resultMS.txt",ios::app);
	//ofstream myfile("mSortIC.txt",ios::app);
	//ofstream myfile("mSortDC.txt",ios::app);
	if(myfile.is_open())
	{
		//myfile<<"Data Set\t\tTime\t\tComparisons"<<endl;
		myfile<<size<<","<<diff.count()<<","<<comparisons<<"\n";
		myfile.close();
	}
	else
		cout<<"Unable to open file\n";
	return 0;
}

#include<bits/stdc++.h>
using namespace std;
int main()
{
	ofstream myfile("msortInc.txt",ios::app);
		for(int i=0;i<500000;i++)
		{
			myfile<<i<<endl;
		}
}
